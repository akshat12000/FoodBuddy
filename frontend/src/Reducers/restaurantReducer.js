import { createReducer } from "@reduxjs/toolkit";

const initialState = {}

export const restaurantReducer = createReducer(initialState,{
    getRestaurantsRequest:(state)=>{
        state.loading=true;
    },
    getRestaurantsSuccess:(state,action)=>{
        state.loading=false;
        state.restaurants=action.payload;
    },
    getRestaurantsFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    getRestaurantRequest:(state)=>{
        state.loading=true;
    },
    getRestaurantSuccess:(state,action)=>{
        state.loading=false;
        state.restaurant=action.payload;
    },
    getRestaurantFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    createRestaurantRequest:(state)=>{
        state.loading=true;
    },
    createRestaurantSuccess:(state,action)=>{
        state.loading=false;
        state.restaurant=action.payload;
    },
    createRestaurantFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    updateRestaurantRequest:(state)=>{
        state.loading=false
    },
    updateRestaurantSuccess:(state,action)=>{
        state.loading=false;
        state.restaurant=action.payload;
    },
    updateRestaurantFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    deleteRestaurantRequest:(state)=>{
        state.loading=false
    },
    deleteRestaurantSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    },
    deleteRestaurantFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    updateMenuRequest:(state)=>{
        state.loading=false
    },
    updateMenuSuccess:(state,action)=>{
        state.loading=false;
        state.item=action.payload;
    },
    updateMenuFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    getAMenuRequest:(state)=>{
        state.loading=false
    },
    getAMenuSuccess:(state,action)=>{
        state.loading=false;
        state.item=action.payload;
    },
    getAMenuFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    deleteMenuRequest:(state)=>{
        state.loading=false
    },
    deleteMenuSuccess:(state,action)=>{
        state.loading=false;
        state.message=action.payload;
    },
    deleteMenuFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    createMenuRequest:(state)=>{
        state.loading=false
    },
    createMenuSuccess:(state,action)=>{
        state.loading=false;
        state.item=action.payload;
    },
    createMenuFailure:(state,action)=>{
        state.loading=false;
        state.error=action.payload;
    },
    clearErrors:(state)=>{
        state.error = null;
    },
    clearMessage:(state)=>{
        state.message = null;
    }
})